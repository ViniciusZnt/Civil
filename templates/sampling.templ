package templates

type Dados struct {
	ID                    int    `json:"id"`
	TemperaturaAmbiente   string `json:"temperatura_ambiente"`
	TemperaturaRecipiente string `json:"temperatura_recipiente"`
	Humidade              string `json:"humidade"`
	TempoAtual            string `json:"tempo_atual"`
}

templ Sampling() {
	<html>
		<div class="flex justify-center">
			<h2 class="text-2xl font-bold mb-4 font-body">Selecione o Intervalo de Datas</h2>
		</div>
		<form id="dateRangeForm" class="space-y-4">
			<div>
				<label for="startDate" class="block font-medium font-body">Data de Início:</label>
				<input type="date" id="startDate" name="startDate" min="2023-10-16" value="2023-10-16" class="border rounded-md p-2 w-full text-white bg-black bg-opacity-80"/>
				<label for="endDate" class="block font-body">Data de Término:</label>
				<input type="date" id="endDate" name="endDate" min="2023-10-16" value="2023-10-16" class="border rounded-md p-2 w-full text-white bg-black bg-opacity-80"/>
				<button type="submit" class="my-button">Aplicar Filtro</button>
			</div>
		</form>
		<script>
			document.getElementById("dateRangeForm").addEventListener("submit", e => {
				e.preventDefault(); 
				transformDataInArray();
			})

			let tempAtual = [];
			let arrayFiltrado = []; 
			let partes = [];
			let dadosFiltrados = [];
			let dadosFinais = []

			function transformDataInArray() {
				var startDate = document.getElementById("startDate").value;
				var endDate = document.getElementById("endDate").value;

				console.log(startDate);
				console.log(endDate);

				// filtra dados inicio e fim

				dadosTemp.forEach(objeto => {
					tempAtual.push(objeto.tempo_atual)
				})

				tempAtual.forEach(tempo => {
					const parte = tempo.split(" ");
					arrayFiltrado.push(parte[0]);
					partes.push(parte[1]);
				});

				applyFilter(arrayFiltrado, startDate, endDate)
			}
				
			function applyFilter(arrayFiltrado, startDate, endDate){

				// dadosTemp <- aplicar filtro
				// recarregar o gráfico com o novo array
			
				for (let i = 0; i < arrayFiltrado.length; i++) {
					
					if (arrayFiltrado[i] >= startDate && arrayFiltrado[i] <= endDate) {
						//Se ele estiver no intervalo depois do filtro ele deve adcionar o tempo
						//novamente na array voltando para o padrão anterior de data tempo,
						dadosFiltrados[i] = arrayFiltrado[i] + partes[i];

					}
				}

				//////
				console.log(dadosFiltrados);
				console.log (tempAtual);
				// partes.forEach(vezes =>{
				// 	dadosFiltrados[vezes] += vezes;
				// })
				for (let i = 0; i < dadosFiltrados.length; i++){
					dadosFiltrados[i] += partes[i]
				}
				console.log(dadosFinais);



				// atualiza o gráfico				

				////
				dadosTemp.forEach(objeto =>{
					for(i=0;i<dadosFiltrados.length;i++){
						if(dadosTemp.tempo_atual == dadosFiltrados[i]){
							//TODO Transformar esses dados em uma estruturar e chamar a fun
							//ção carrega Chart porque ela aceita uma array com objetos
							//dadosFinais.
							let vezes;
							dadosTemp.tempo_atual = dadosFiltrados[i];
							console.log(vezes);
							vezes++;
						}
					}
				})

				//carregaChart(dadosFiltrados)
			}
    
		</script>
	</html>
}
