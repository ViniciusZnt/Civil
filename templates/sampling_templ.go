// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Sampling() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html><div class=\"flex justify-center\"><h2 class=\"text-2xl font-bold mb-4 font-body\">Selecione o Intervalo de Datas</h2></div><form id=\"dateRangeForm\" class=\"space-y-4\"><div><label for=\"startDate\" class=\"block font-medium font-body\">Data de Início:</label> <input type=\"date\" id=\"startDate\" name=\"startDate\" min=\"2023-10-16\" value=\"2023-10-16\" class=\"border rounded-md p-2 w-full text-white bg-black bg-opacity-80\"> <label for=\"endDate\" class=\"block font-body\">Data de Término:</label> <input type=\"date\" id=\"endDate\" name=\"endDate\" min=\"2023-10-16\" value=\"2023-10-16\" class=\"border rounded-md p-2 w-full text-white bg-black bg-opacity-80\"> <button type=\"submit\" class=\"my-button\">Aplicar Filtro</button></div></form><script>\n\t\t\tdocument.getElementById(\"dateRangeForm\").addEventListener(\"submit\", e => {\n\t\t\t\te.preventDefault(); \n\t\t\t\ttransformDataInArray();\n\t\t\t})\n\n\t\t\tfunction transformDataInArray() {\n\t\t\t\tvar startDate = document.getElementById(\"startDate\").value;\n\t\t\t\tvar endDate = document.getElementById(\"endDate\").value;\n\n\t\t\t\tconsole.log(startDate)\n\t\t\t\tconsole.log(endDate)\n\n\t\t\t\t// filtra dados inicio e fim\n\t\t\t\tlet tempAtual = [];\n\t\t\t\tlet arrayFiltrado = []; \n\t\t\t\t\n\t\t\t\tconsole.log(dadosTemp)\n\n\t\t\t\tdadosTemp.forEach(objeto => {\n\t\t\t\t\t// tempAtual.push(objeto.id)\n\t\t\t\t\t// tempAtual.push(objeto.temperatura_recipiente)\n\t\t\t\t\t// tempAtual.push(objeto.temperatura_ambiente)\n\t\t\t\t\ttempAtual.push(objeto.tempo_atual)\n\t\t\t\t})\n\n\t\t\t\tconsole.log(tempAtual)\n\n\t\t\t\ttempAtual.forEach(tempo => {\n\t\t\t\t\tconst parte = tempo.split(\" \");\n\t\t\t\t\tarrayFiltrado.push(parte[0]);\n\t\t\t\t});\n\n\t\t\t\tapplyFilter(arrayFiltrado, startDate, endDate)\n\t\t\t}\n\t\t\t\t\n\t\t\tfunction applyFilter(arrayFiltrado, startDate, endDate){\n\n\t\t\t\t// dadosTemp <- aplicar filtro\n\t\t\t\t// recarregar o gráfico com o novo array\n\t\t\t\n\t\t\t\tlet dadosFiltrados = []\n\t\t\t\tfor (let i = 0; i < arrayFiltrado.length; i++) {\n\t\t\t\t\t\n\t\t\t\t\tif (arrayFiltrado[i] >= startDate && arrayFiltrado[i] <= endDate) {\n\t\t\t\t\t\tdadosFiltrados.push(arrayFiltrado[i]);\n\t\t\t\t\t\t// console.log(arrayFiltrado[i])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(dadosFiltrados)\n\t\t\t\t// atualiza o gráfico\n\t\t\t\tcarregaChart(dadosFiltrados)\n\t\t\t}\n    \n\t\t</script></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
