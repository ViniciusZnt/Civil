// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Graph() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"chart-container\" style=\"position: relative; height: 80vh; width: 99vw;\"><canvas id=\"realtimeChart\"></canvas></div><script>\n\n    var dadosTemp;\n\n    async function fetchData() {\n                \n        const response = await fetch(\"http://localhost:3000/dados\");\n        const dados = await response.json();\n        carregaChart(dados);\n        dadosTemp = dados;\n\n    }\n\n    async function carregaChart (dados) {\n\n        const labels = [];\n        const temperaturaAmbienteData = [];\n        const temperaturaRecipienteData = [];\n        \n        dados.forEach(objeto => {\n            // Extrai as informações relevantes de cada objeto\n            const temperaturaAmbiente = parseFloat(objeto.temperatura_ambiente);\n            const temperaturaRecipiente = parseFloat(objeto.temperatura_recipiente);\n            const tempoAtual = objeto.tempo_atual;\n                \n            // Adiciona as informações aos arrays de dados do gráfico\n            labels.push(tempoAtual);\n            temperaturaAmbienteData.push(temperaturaAmbiente);\n            temperaturaRecipienteData.push(temperaturaRecipiente);\n        });\n\n        myChart.data.labels = labels;\n        myChart.data.datasets[0].data = temperaturaAmbienteData;\n        myChart.data.datasets[1].data = temperaturaRecipienteData;\n        myChart.update();\n    }\n\n    // Definir o gráfico dentro da função fetch, após as variáveis estarem definidas\n    var ctx = document.getElementById('realtimeChart').getContext('2d');\n    var myChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: [0, 100],\n            datasets: [{\n                fill: {\n                    target:'origin',\n                    above:'rgb(0,255,0,0.2)',\n                    below:'rgb(0,255,0,0.2)'\n                },\n                label: 'Temperature Ambiente',\n                data: [],\n                backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                borderColor: 'rgba(76, 233, 18, 0.8)',\n                borderWidth: 3\n            }, {\n                fill: {\n                    target:'origin',\n                    above:'rgb(0,0,255,0.2)',\n                    below:'rgb(0,0,255,0.2)'\n                },\n                label: 'Temperature Recipiente',\n                data: [],\n                backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                borderColor: 'rgb(26 ,48, 187, 0.8)',\n                borderWidth: 3\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    beginAtZero: true\n                }\n            }\n        }\n    });\n\n    fetchData();\n    setInterval(fetchData,10000);\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
